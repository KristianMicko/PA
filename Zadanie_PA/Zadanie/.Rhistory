library(lubridate)
install.packages("lubridate")
library(lubridate)
loadedNamespaces(.libPaths())
.libPaths()
loadedNamespaces("C:/geda/R/win-library/3.4")
titanic = read.csv("titanic.csv", header = TRUE, sep = ",")
install.packages("arulesViz")
library(arules)
rules <- apriori(titanic, control = list(verbose=F),
parameter = list(minlen=2, supp=0.005, conf=0.8),
appearance = list(rhs=c("Survived=No","Survived=Yes"), default="lhs"))
View(titanic)
rules.sorted <- sort(rules, by="lift")
View(titanic)
rules <- apriori(Titanic, control = list(verbose=F),
parameter = list(minlen=2, supp=0.005, conf=0.8),
appearance = list(rhs=c("Survived=No","Survived=Yes"), default="lhs"))
titanic$Survived = ifelse(titanic$Survived==1,"Yes","No")
rules <- apriori(titanic, control = list(verbose=F),
parameter = list(minlen=2, supp=0.005, conf=0.8),
appearance = list(rhs=c("Survived=No","Survived=Yes"), default="lhs"))
titanic.raw <- read.table("C:/Users/User/Documents/R_projects/Zadanie_PA/Zadanie/titanic.raw.rdata", header=TRUE, quote="\"")
View(titanic.raw)
str(titanic.raw)
str(titanic.raw)
library(jsonlite)
titanic = fromJSON("titanic.json")
View(titanic)
rules <- apriori(titanic, control = list(verbose=F),
parameter = list(minlen=2, supp=0.005, conf=0.8),
appearance = list(rhs=c("Survived=No","Survived=Yes"), default="lhs"))
rules.sorted <- sort(rules, by="lift")
inspect(rules.sorted)
library(arulesViz)
plot(rules)
spojeneTabulky_1_1 =readRDS("final_1.rda")
spojeneTabulky_1 = readRDS("final.rda")
View(spojeneTabulky_1)
y <- read.transactions("../input/BreadBasket_DMS.csv",
format="single",
cols=c(3,4),
sep=","
)
y <- read.transactions("BreadBasket_DMS.csv",
format="single",
cols=c(3,4),
sep=","
)
View(y)
pravidla = apriori(spojeneTabulky_1)
pravidla = apriori(spojeneTabulky_1[,c(3,4)])
View(pravidla)
plot(pravidla)
summary(pravidla)
pravidla = apriori(spojeneTabulky_1[,c(3,4,6,7,8)])
summary(pravidla)
plot(pravidla)
inspect(pravidla)
pravidla = apriori(spojeneTabulky_1[,c(4,6,7,8)])
inspect(pravidla)
pravidla = apriori(spojeneTabulky_1[,c(4)])
pravidla = apriori(c(spojeneTabulky_1$Item, spojeneTabulky_1$Transaction))
pravidla = apriori(c(spojeneTabulky_1$Item, as.factor(spojeneTabulky_1$Transaction)))
transakcie = as.factor(spojeneTabulky_1$Transaction)
polozky = spojeneTabulky_1$Item
pravidla = apriori(data = c(transakcie,polozky))
y = read.transactions(spojeneTabulky_1)
y <- read.transactions("BreadBasket_DMS.csv",format="single",cols=c(3,4),sep=",")
pravidla = apriori(y)
inspect(pravidla)
pravidla = apriori(y)
inspect(pravidla)
View(pravidla)
pravidla@lhs@data
pravidla@rhs
pravidla = apriori(spojeneTabulky_1)
transakcie = read.csv("BreadBasket_DMS.csv")
pravidla = apriori(transakcie)
inspect(pravidla)
#install.packages("arulesViz")
library(arules)
inspect(pravidla)
View(pravidla)
inspect(View(pravidla))
View(inspect(pravidla))
View(pravidla)
pravidla = as.data.frame(pravidla)
View(rules)
View(pravidla)
inspect(rules)
pravidla = apriori(transakcie)
inspect(head(rules))
inspect(head(pravidla))
inspect(head(pravidla, by="support"))
inspect(head(pravidla, by="support", n=10))
selektovaneTransakcie <- read.transactions("BreadBasket_DMS.csv",format="single",cols=c(3,4),sep=",")
View(selektovaneTransakcie)
pravidla = apriori(selektovaneTransakcie)
inspect(pravidla)
library(arulesViz)
inspect(pravidla)
inspect(pravidla)
inspect(rules)
pravidla = apriori(selektovaneTransakcie)
selektovaneTransakcie <- read.transactions("BreadBasket_DMS.csv",format="single",cols=c(3,4),sep=",")
pravidla = apriori(selektovaneTransakcie)
inspect(pravidla)
View(pravidla)
